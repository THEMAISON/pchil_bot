import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

import keyboards
from config import BOT_API_TOKEN
from keyboards import get_weeks_ik, get_group_rk, get_sevsu_ik, get_days_week_ik
from user import User
from schedule_parser import is_schedule_file_updated, download_schedule_file
import schedule_improver
import schedule_data
from datetime import datetime

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher(bot=bot, storage=storage)


class ScheduleStatesGroup(StatesGroup):
    group = State()


start_text = '''
üëã *–ø—á–∏–ª* –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è

–Ø –≤ `–±–µ—Ç–∞` –≤–µ—Ä—Å–∏–∏, –Ω–æ —É–∂–µ –º–æ–≥—É:
ü¶æ –ö–∏–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≥–∏–±
üîó –ö–∏–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ —Å–∏–±–∏—Ä—å
ü•± –î–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è

/help - –£–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞'''

help_text = '''
/sch - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
/sev - –°–∞–π—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –º—É–¥–ª –∏ –¥—Ä.)'''

schedule_messages = {
    'check': 'üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...',
    'update_pr': '‚èèÔ∏è –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...',
    'download_pr': 'üì• –°–∫–∞—á–∏–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...',
    'improve_pr': 'ü™Ñ –£–ª—É—á—à–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...',
    'load_pr': 'üì• –ó–∞–≥—Ä—É–∂–∞—é...',
    'cancel': '‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω',
    'error': '‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ',
}

user = User()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=start_text, parse_mode='Markdown')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=help_text, parse_mode='Markdown')
    await message.delete()


@dp.message_handler(commands=['sev'])
async def sev_command(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á. –°–µ–≤–ì–£',
                           reply_markup=get_sevsu_ik())


@dp.message_handler(commands=['sch'])
async def schedule_command(message: types.Message):
    await message.delete()
    # await upload_legacy_schedule()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    schedule_sent_message = await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('check'))
    is_updated = is_schedule_file_updated()
    await schedule_sent_message.delete()

    is_exist = schedule_data.is_legacy_file_exist()

    if is_updated or not is_exist:
        ssm_text = schedule_messages.get('download_pr') if not is_exist else schedule_messages.get('update_pr')
        schedule_sent_message = await bot.send_message(chat_id=message.chat.id, text=ssm_text)

        # —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
        schedule_data.remove_schedule_files()
        download_schedule_file()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        schedule_data.save_parse_data()

        await schedule_sent_message.delete()

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if is_updated or not len(schedule_data.available_weeks):
        schedule_improver.define_available_weeks()
        keyboards.define_weeks_ik()

    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç', reply_markup=get_group_rk())
    await ScheduleStatesGroup.group.set()


@dp.message_handler(Text(equals='üóëÔ∏è –û—Ç–º–µ–Ω–∞'), state='*')
async def cancel_schedule_improve(message: types.Message, state: FSMContext):
    if state is None:
        return

    await message.delete()
    await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('cancel'), reply_markup=ReplyKeyboardRemove())
    await state.finish()


@dp.message_handler(Text(equals='üìì –ò–ò–¢-21'), state=ScheduleStatesGroup.group)
async def schedule_process(message: types.Message, state: FSMContext):
    loading_schedule_message = await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('load_pr'), reply_markup=ReplyKeyboardRemove())
    schedule_sent_message = await bot.send_document(chat_id=message.chat.id, document=open(
        schedule_data.get_legacy_schedule_path(), 'rb'))
    await loading_schedule_message.delete()

    await state.finish()


@dp.message_handler(Text(equals=['üìí –ò–°–±-21-1-–æ', 'üìí –ò–°–±-21-2-–æ', 'üìí –ò–°–±-21-3-–æ', 'üìí –ü–ò–±-21-1-–æ']), state=ScheduleStatesGroup.group)
async def schedule_improve_process(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = int(message.text[-3]) if '–ò–°' in message.text else 4

    print('name:', message.from_user.first_name, 'id:', message.from_user.id, 'time: ', datetime.now())

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
    schedule_data.group = data['group']
    # user.group = schedule_data.group

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    schedule_data.set_current_week()
    # user.week = schedule_data.week

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if schedule_data.week not in schedule_data.available_weeks:
        await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('error'),
                               reply_markup=ReplyKeyboardRemove())
        return

    # —É–ª—É—á—à–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not schedule_data.is_improve_file_exist():
        message_schedule_improving = await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('improve_pr'), reply_markup=ReplyKeyboardRemove())
        schedule_improver.improve_schedule_week()
        await message_schedule_improving.delete()

    loading_schedule_message = await bot.send_message(chat_id=message.chat.id, text=schedule_messages.get('load_pr'), reply_markup=ReplyKeyboardRemove())
    schedule_sent_message = await bot.send_document(chat_id=message.chat.id, document=open(
        schedule_data.get_improve_schedule_path(), 'rb'), reply_markup=get_weeks_ik())
    await loading_schedule_message.delete()

    await state.finish()


@dp.callback_query_handler(lambda cb: 'week_options' in cb.data)
async def callback_schedule_option(callback: types.CallbackQuery):
    # –≤—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if 'text' in callback.data:
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup())

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_improver.define_days_week_messages()

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_data.day = 1
        day_week_message = schedule_data.days_week_messages.get(schedule_data.day)

        if day_week_message:
            day_week_sent_message = await bot.send_message(chat_id=callback.message.chat.id, text=day_week_message, parse_mode='Markdown', reply_markup=get_days_week_ik())

        await callback.answer()
    # –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è –Ω–µ–¥–µ–ª—è
    else:
        # schedule_data.update_week(callback.data)
        week_num = int(callback.data[callback.data.find('num')+3:])

        if week_num != schedule_data.week:
            await callback.message.delete()

            schedule_data.define_week(week_num)

            if not schedule_data.is_improve_file_exist():
                schedule_sent_message = await bot.send_message(chat_id=callback.message.chat.id, text=schedule_messages.get('improve_pr'))
                schedule_improver.improve_schedule_week()
                await schedule_sent_message.delete()

            loading_schedule_message = await bot.send_message(chat_id=callback.message.chat.id, text=schedule_messages.get('load_pr'), reply_markup=ReplyKeyboardRemove())
            schedule_sent_message = await bot.send_document(chat_id=callback.message.chat.id, document=open(
                schedule_data.get_improve_schedule_path(), 'rb'), reply_markup=get_weeks_ik())
            await loading_schedule_message.delete()
            await callback.answer()
        else:
            await callback.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


@dp.callback_query_handler(lambda cb: 'days_week' in cb.data)
async def callback_text_schedule_days_week(callback: types.CallbackQuery):
    # await callback.message.delete()

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    schedule_data.day = int(callback.data[-1])
    day_week_message = schedule_data.days_week_messages.get(schedule_data.day)
    await callback.message.edit_text(day_week_message, parse_mode='Markdown', reply_markup=get_days_week_ik())

    await callback.answer()


if __name__ == '__main__':
    if schedule_data.is_parse_data_exist():
        schedule_data.import_parse_data()

    executor.start_polling(dp, skip_updates=True)
